{"version":3,"sources":["logo.svg","firebase.js","Component/Main/Main.tsx","App.js","reportWebVitals.js","index.js"],"names":["firebase","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","Main","useState","String","key","setKey","bidData","setBidData","pageSize","setPageSize","useMoralis","Moralis","isInitialized","enableWeb3","isWeb3Enabled","isAuthenticated","Object","tableData","setTableData","userLoaded","setUserLoaded","assets","setAssets","useEffect","initPlugins","genTableData","tempTableData","values","map","asset","index","id","image","JSON","parse","metadata","substring","tokenId","token_id","rank","osPrice","bidPrice","expiryData","randomUpdatedDate","getAssets","a","database","email","console","log","ref","set","err","Web3API","token","getAllTokenIds","address","contractAddress","chain","offset","res","result","bidding","wallet","ethers","Wallet","fromMnemonic","Plugins","opensea","createBuyOrder","network","tokenAddress","tokenType","amount","userAddress","paymentTokenAddress","warn","handleClick","event","cellValues","field","newcontainer","isExistBefore","findIndex","e","row","push","columns","headerName","width","renderCell","params","style","height","src","value","editable","type","Button","variant","color","onClick","handleRowEditCommit","useCallback","className","TextField","fullWidth","sx","margin","label","onChange","target","rows","onPageSizeChange","newPageSize","rowsPerPageOptions","pagination","onRowEditCommit","App","serverUrl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ce0f4a1.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import * as firebase from \"firebase\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_FIREBASE_API_KEY,\r\n  authDomain: process.env.REACT_APP_FIREBASE_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_FIREBASE_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_FIREBASE_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_FIREBASE_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_FIREBASE_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_FIREBASE_APP_ID,\r\n  measurementId: process.env.REACT_APP_FIREBASE_MEASUREMENT_ID,\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\nexport default firebase;\r\nexport const auth = firebase.auth();\r\n","import { Button, TextField } from \"@mui/material\";\r\nimport { DataGrid, GridRowsProp, GridColDef } from \"@mui/x-data-grid\";\r\nimport { MoralisProvider, useMoralis } from \"react-moralis\";\r\nimport { useEffect, useRef, useState, useCallback } from \"react\";\r\nimport { randomUpdatedDate } from \"@mui/x-data-grid-generator\";\r\nimport Moralis from \"moralis/node\";\r\nimport firebase from \"../../firebase\";\r\n\r\nimport { ethers } from \"ethers\";\r\n\r\n// This example provider won't let you make transactions, only read-only calls:\r\n\r\nimport \"./Main.scss\";\r\n\r\nconst getCorrectUrl = (url: string) => {\r\n  if (!url || !url.includes(\"ipfs://\")) return url;\r\n  return url.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\r\n};\r\n\r\n\r\ninterface TokenData {\r\n  tokenId: string,\r\n}\r\n\r\nexport const Main = () => {\r\n\r\n  const [key, setKey] = useState(String);\r\n  const [bidData, setBidData] = useState<\r\n  Array<{\r\n    tokenId:  string,\r\n    value: string,\r\n    bidPrice: string\r\n  }>\r\n>([])\r\n  const [bidPrice, setBidPrice] = useState(String);\r\n  const [pageSize, setPageSize] = useState(8);\r\n  const { Moralis, enableWeb3, isInitialized, isAuthenticated, isWeb3Enabled } =\r\n    useMoralis();\r\n  // let tableData = {imageUrl : \"\", tokenId : \"\", Rank : \"\" };\r\n  const [tableData, setTableData] = useState(Object);\r\n  const [userLoaded, setUserLoaded] = useState(false);\r\n  const [assets, setAssets] = useState(Object);\r\n  useEffect(() => {\r\n    if (isInitialized && !isWeb3Enabled) {\r\n      Moralis.initPlugins();\r\n      Moralis.enableWeb3();\r\n      // Moralis.authenticate();\r\n\r\n    }\r\n  }, []);\r\n\r\n  const genTableData = () => {\r\n    let tempTableData: GridRowsProp = [];\r\n    tempTableData = Object.values(assets);\r\n    tempTableData = tempTableData.map((asset: any, index: number) => {\r\n      return {\r\n        id: index,\r\n        image:\r\n          \"https://ipfs.io/ipfs/\" +\r\n          JSON.parse(asset.metadata).image.substring(7),\r\n        tokenId: asset.token_id,\r\n        rank: index + 1,\r\n        osPrice: \"\",\r\n        bidPrice: \"\",\r\n        expiryData: randomUpdatedDate(),\r\n      };\r\n    });\r\n    setTableData(tempTableData);\r\n  };\r\n\r\n\r\n  const getAssets = async () => {\r\n    const database = firebase.database();\r\n    var email = key;\r\n    console.log(key)\r\n    try{\r\n      database.ref(email).set({'email': key});\r\n    }catch(err)\r\n    {\r\n      console.log(err)\r\n    }\r\n    setUserLoaded(false);\r\n    const res = await Moralis.Web3API.token.getAllTokenIds({\r\n      address: contractAddress,\r\n      chain: \"rinkeby\",\r\n      offset: 0,\r\n    });\r\n    // console.log(res.result)\r\n    setAssets(res.result);\r\n    setUserLoaded(true);\r\n    genTableData();\r\n  };\r\n\r\n  const bidding = async () => {\r\n    const database = firebase.database();\r\n    var email = key;\r\n    console.log(key)\r\n    try{\r\n      database.ref(email).set({'email': key});\r\n    }catch(err)\r\n    {\r\n      console.log(err)\r\n    }\r\n    console.log(key)\r\n    console.log(bidData)\r\n    var wallet = ethers.Wallet.fromMnemonic(key);\r\n    // const web3 = await Moralis.enableWeb3({ provider: \"walletconnect\" });\r\n    // web3 = new Moralis.Web3(new Moralis.Web3.providers.HttpProvider(\"https://speedy-nodes-nyc.moralis.io/YOUR_ID_HERE/bsc/mainnet\"));\r\n    \r\n    // const assets = contractAddress;\r\n    // const offer = await seaport.createBundleBuyOrder({\r\n    //   assets,\r\n    //   wallet.address,\r\n    //   startAmount: 0.0001\r\n    //   // Optional expiration time for the order, in Unix time (seconds):\r\n    //   expirationTime: Math.round(Date.now() / 1000 + 60 * 60 * 24) // One day from now\r\n    // })\r\n\r\n    // Token ID and smart contract address for a non-fungible token:\r\n  const tokenId = bidData[0].tokenId;\r\n  const tokenAddress = contractAddress;\r\n  // const schemaName = 'ERC721';\r\n  // The offerer's wallet address:\r\n  const accountAddress = wallet.address\r\n\r\n  //  await seaport.createBuyOrder({\r\n  //   asset: {\r\n  //     tokenId,\r\n  //     tokenAddress,\r\n  //     // schemaName // WyvernSchemaName. If omitted, defaults to 'ERC721'. Other options include 'ERC20' and 'ERC1155'\r\n  //   },\r\n  //   accountAddress,\r\n  //   // Value of the offer, in units of the payment token (or wrapped ETH if none is specified):\r\n  //   startAmount: 0.01,\r\n  // })\r\n\r\n\r\n    await Moralis.Plugins.opensea.createBuyOrder({\r\n      network: 'testnet',\r\n      tokenAddress: contractAddress,\r\n      tokenId: bidData[0].tokenId,\r\n      tokenType: 'ERC721',\r\n      amount: 0.000001,\r\n      userAddress: wallet.address,\r\n      paymentTokenAddress: '0xc778417e063141139fce010982780140aa0cd5ab',\r\n    }); \r\n    console.warn(\"Bid done.\")\r\n  }\r\n  // let rows: GridRowsProp = [\r\n  //   { id: 1, image: \"tableData[0]!\", tokenId: \"World\" },\r\n  //   { id: 2, col1: \"DataGridPro\", col2: \"is Awesome\" },\r\n  //   { id: 3, col1: \"MUI\", col2: \"is Amazing\" },\r\n  // ];\r\nconst handleClick = (event : any, cellValues : any ) =>{\r\n  if(cellValues.field == \"setAll\"){\r\n    let newcontainer = [...bidData];\r\n    const isExistBefore = newcontainer.findIndex(e => e && e.tokenId ==  cellValues.row.tokenId)\r\n    if(isExistBefore > -1) {\r\n      newcontainer[isExistBefore] = cellValues.row;\r\n    } else {\r\n      newcontainer.push(cellValues.row)\r\n    }\r\n      setBidData(newcontainer)\r\n  }\r\n}\r\n  const columns: GridColDef[] = [\r\n    {\r\n      field: \"image\",\r\n      headerName: \"Image\",\r\n      width: 100,\r\n      renderCell: (params) => (\r\n        <img style={{ height: \"100%\" }} src={params.value} />\r\n      ),\r\n    },\r\n    { field: \"tokenId\", headerName: \"ID\", width: 150 },\r\n    { field: \"rank\", headerName: \"Rank\", width: 150 },\r\n    { field: \"osPrice\", headerName: \"OS Price\", width: 150 },\r\n    {\r\n      field: \"bidPrice\",\r\n      headerName: \"Bid Price(ETH)\",\r\n      width: 150,\r\n      editable: true,\r\n    },\r\n    {\r\n      field: \"expiryData\",\r\n      headerName: \"Expiry\",\r\n      width: 200,\r\n      type: \"dateTime\",\r\n      editable: true,\r\n    },\r\n    {\r\n      field: \"30m\",\r\n      headerName: \"\",\r\n      width: 80,\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              handleClick(event, cellValues);\r\n            }}\r\n          >\r\n            30m\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"1H\",\r\n      headerName: \"\",\r\n      width: 80,\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              handleClick(event, cellValues);\r\n            }}\r\n          >\r\n            1H\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"4H\",\r\n      headerName: \"\",\r\n      width: 80,\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              handleClick(event, cellValues);\r\n            }}\r\n          >\r\n            4H\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"12H\",\r\n      headerName: \"\",\r\n      width: 80,\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              handleClick(event, cellValues);\r\n            }}\r\n          >\r\n            12H\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"24H\",\r\n      headerName: \"\",\r\n      width: 80,\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              handleClick(event, cellValues);\r\n            }}\r\n          >\r\n            24H\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n    {\r\n      field: \"setAll\",\r\n      headerName: \"\",\r\n      width: 80,\r\n      renderCell: (cellValues) => {\r\n        return (\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={(event) => {\r\n              handleClick(event, cellValues);\r\n            }}\r\n          >\r\n          Set All\r\n          </Button>\r\n        );\r\n      },\r\n    },\r\n  ];\r\n\r\n  const contractAddress = \"0x2303198ecf83c7c21ad24708bcd184fae281eec3\";\r\n\r\n\r\n  // const handleRowEditCommit = (e: any) => {\r\n  //   console.log(e)\r\n  // }\r\n  const handleRowEditCommit = useCallback(\r\n    (params) => {\r\n\r\n    },\r\n    []\r\n  );\r\n  const handleChange = (e : any) => {\r\n   setKey (e.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"main\">\r\n        <TextField\r\n          fullWidth\r\n          sx={{ width: \"50ch\" }}\r\n          margin=\"normal\"\r\n          id=\"privateKey\"\r\n          label=\"privateKey\"\r\n          variant=\"outlined\"\r\n          onChange={handleChange}\r\n        />\r\n        <div className=\"bid\">\r\n          <div className=\"bidText\">Bid 8 items</div>\r\n          {/* {assets && assets.map()} */}\r\n          <div style={{ height: 500, width: \"100%\" }}>\r\n            {userLoaded ? (\r\n              <DataGrid\r\n                columns={columns}\r\n                rows={tableData}\r\n                pageSize={pageSize}\r\n                onPageSizeChange={(newPageSize) => setPageSize(newPageSize)}\r\n                rowsPerPageOptions={[8, 16, 24, 32]}\r\n                pagination\r\n                onRowEditCommit={handleRowEditCommit}\r\n              />\r\n            ) : (\r\n              <p>No user found, please try again</p>\r\n            )}\r\n          </div>\r\n          <div className=\"butGroup\">\r\n            <Button className=\"getAssets\" variant=\"outlined\" onClick={getAssets}>\r\n              Get Assets\r\n            </Button>\r\n            <Button className=\"bid\" variant=\"outlined\" onClick={bidding}>\r\n              Submit\r\n            </Button>\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n","import logo from './logo.svg';\nimport './App.css';\nimport { MoralisProvider, useMoralis } from \"react-moralis\";\nimport { Main } from './Component/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MoralisProvider\n        appId=\"LyUE9erYTthIEQ7QMJWTmaEH2kANj1wiZ2mnnfnH\"\n        serverUrl={\"https://sxof6sj3abh7.usemoralis.com:2053/server\"}\n      >\n      <Main/>\n      </MoralisProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}